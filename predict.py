import json
import numpy as np
import tensorflow as tf
import joblib
import os

# --- 1. C·∫§U H√åNH ---
INPUT_JSON_PATH = "video_features.json"
MLP_MODEL_PATH = 'model_mlp.keras'
SCALER_PATH = 'scaler.joblib'
LABEL_ENCODER_PATH = 'label_encoder.joblib'

# --- 2. T·∫¢I M√î H√åNH PH√ÇN LO·∫†I V√Ä C√ÅC C√îNG C·ª§ ---
print("ƒêang t·∫£i m√¥ h√¨nh MLP, Scaler v√† LabelEncoder...")
# Ki·ªÉm tra xem c√°c file c·∫ßn thi·∫øt c√≥ t·ªìn t·∫°i kh√¥ng
required_files = [INPUT_JSON_PATH, MLP_MODEL_PATH, SCALER_PATH, LABEL_ENCODER_PATH]
for file_path in required_files:
    if not os.path.exists(file_path):
        print(f"L·ªói: Kh√¥ng t√¨m th·∫•y file '{file_path}'. Vui l√≤ng ch·∫°y script training v√† analysis tr∆∞·ªõc.")
        exit()

try:
    # S·ª¨ D·ª§NG tf.keras.models.load_model CH√çNH TH·ª®C
    final_model = tf.keras.models.load_model(MLP_MODEL_PATH)
    scaler = joblib.load(SCALER_PATH)
    label_encoder = joblib.load(LABEL_ENCODER_PATH)
    print("‚úÖ M√¥ h√¨nh v√† c√¥ng c·ª• ƒë√£ t·∫£i th√†nh c√¥ng.")
except Exception as e:
    print(f"L·ªói khi t·∫£i m√¥ h√¨nh: {e}")
    print("ƒê√¢y ch√≠nh l√† l·ªói 'batch_shape' b·∫°n g·∫∑p. V·∫•n ƒë·ªÅ 100% n·∫±m ·ªü file model ho·∫∑c m√¥i tr∆∞·ªùng TensorFlow.")
    exit()

# --- 3. ƒê·ªåC D·ªÆ LI·ªÜU T·ª™ JSON V√Ä D·ª∞ ƒêO√ÅN ---
print(f"\nüß† ƒêang ƒë·ªçc ƒë·∫∑c tr∆∞ng t·ª´ '{INPUT_JSON_PATH}' v√† d·ª± ƒëo√°n...")
with open(INPUT_JSON_PATH, 'r') as f:
    data = json.load(f)

feature_dict = data.get('features', {})
if not feature_dict:
    print("L·ªói: File JSON kh√¥ng ch·ª©a ƒë·∫∑c tr∆∞ng ƒë·ªÉ d·ª± ƒëo√°n.")
    exit()

# S·∫Øp x·∫øp c√°c feature theo th·ª© t·ª± alphabet ƒë·ªÉ ƒë·∫£m b·∫£o nh·∫•t qu√°n
features = [feature_dict.get(f"percent_{emotion}", 0) for emotion in sorted(['angry', 'disgust', 'fear', 'happy', 'neutral', 'sad', 'surprise'])]

features_scaled = scaler.transform(np.array(features).reshape(1, -1))

prediction_proba = final_model.predict(features_scaled)[0]
prediction_index = np.argmax(prediction_proba)
prediction_label = label_encoder.inverse_transform([prediction_index])[0]

print("\n" + "="*40)
print(f" K·∫æT QU·∫¢ D·ª∞ ƒêO√ÅN CHO VIDEO: {data['video_path']}")
print("="*40)
print(f"  ‚ñ∂Ô∏è Kh√¥ng kh√≠ l·ªõp h·ªçc: {str(prediction_label)}")
print(f"  ‚ñ∂Ô∏è ƒê·ªô tin c·∫≠y (Confidence): {prediction_proba[prediction_index]:.2%}")
print("="*40)